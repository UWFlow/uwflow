CREATE TABLE "user" (
  id INT
    GENERATED BY DEFAULT AS IDENTITY
    PRIMARY KEY,
  name TEXT NOT NULL
    CHECK user_name_length(CHAR_LENGTH(name) <= 256),
  program TEXT
    CHECK user_program_length(CHAR_LENGTH(program) <= 256)
);

CREATE TABLE course (
  id INT
    GENERATED BY DEFAULT AS IDENTITY
    PRIMARY KEY,
  code TEXT NOT NULL
    CONSTRAINT course_code_unique UNIQUE
    CHECK course_code_length(CHAR_LENGTH(code) <= 16),
  name TEXT NOT NULL
    CHECK course_name_length(CHAR_LENGTH(name) <= 256),
  description TEXT
    CHECK course_description_length(CHAR_LENGTH(name) <= 1024)
);

CREATE TABLE prof (
  id INT
    GENERATED BY DEFAULT AS IDENTITY
    PRIMARY KEY,
  name TEXT NOT NULL
    CHECK prof_name_length(CHAR_LENGTH(name) <= 256)
);

CREATE TABLE course_review (
  id INT
    GENERATED BY DEFAULT AS IDENTITY
    PRIMARY KEY,
  course_id INT
    REFERENCES course(id)
    ON UPDATE CASCADE ON DELETE SET NULL,
  prof_id INT
    REFERENCES prof(id)
    ON UPDATE CASCADE ON DELETE SET NULL,
  user_id INT
    REFERENCES "user"(id)
    ON UPDATE CASCADE ON DELETE SET NULL,
  text TEXT
    CHECK course_review_length(CHAR_LENGTH(text) <= 1024),
  easy BOOLEAN,
  liked BOOLEAN,
  useful BOOLEAN
);

CREATE TABLE prof_review (
  id INT
    GENERATED BY DEFAULT AS IDENTITY
    PRIMARY KEY,
  course_id INT
    REFERENCES course(id)
    ON UPDATE CASCADE ON DELETE SET NULL,
  prof_id INT
    REFERENCES prof(id)
    ON UPDATE CASCADE ON DELETE SET NULL,
  user_id INT
    REFERENCES "user"(id)
    ON UPDATE CASCADE ON DELETE SET NULL,
  text TEXT
    CHECK prof_review_length(CHAR_LENGTH(text) <= 1024),
  clear BOOLEAN,
  engaging BOOLEAN
);

CREATE TABLE course_review_vote (
  review_id INT NOT NULL
    REFERENCES review(id)
    ON UPDATE CASCADE
    ON DELETE CASCADE,
  user_id INT NOT NULL
    REFERENCES "user"(id)
    ON UPDATE CASCADE
    ON DELETE CASCADE,
  vote INT NOT NULL
    CONSTRAINT vote_range(vote = -1 OR vote = 1),
  PRIMARY KEY(review_id, user_id)
);

CREATE TABLE prof_review_vote (
  review_id INT NOT NULL
    REFERENCES review(id)
    ON UPDATE CASCADE
    ON DELETE CASCADE,
  user_id INT NOT NULL
    REFERENCES "user"(id)
    ON UPDATE CASCADE
    ON DELETE CASCADE,
  vote INT NOT NULL
    CONSTRAINT vote_range(vote = -1 OR vote = 1),
  PRIMARY KEY(review_id, user_id)
);

-- Aggregations intractable in Hasura
CREATE SCHEMA aggregate;

CREATE VIEW aggregate.prof_review_stats AS
SELECT
  course_id,
  SUM(CASE WHEN easy THEN 1 ELSE 0 END) AS easy,
  SUM(CASE WHEN NOT easy THEN 1 ELSE 0 END) AS not_easy,
  SUM(CASE WHEN liked THEN 1 ELSE 0 END) AS liked,
  SUM(CASE WHEN NOT liked THEN 1 ELSE 0 END) AS not_liked,
  SUM(CASE WHEN useful THEN 1 ELSE 0 END) AS useful,
  SUM(CASE WHEN NOT useful THEN 1 ELSE 0 END) AS not_useful
FROM course_review GROUP BY course_id;

CREATE VIEW aggregate.prof_review_stats AS
SELECT
  course_id,
  SUM(clear) AS clear,
  SUM(CASE WHEN clear IS NOT NULL THEN 1 ELSE 0 END) AS not_clear,
  SUM(engaging) AS engaging,
  SUM(CASE WHEN engaging IS NOT NULL THEN 1 ELSE 0 END) AS not_engaging
FROM prof_review GROUP BY course_id;
